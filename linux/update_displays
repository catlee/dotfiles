#!/usr/bin/env python3
from subprocess import check_output, check_call
import re


class Display(object):
    edid = None
    connected = False

    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return "<Display {} {} {}>".format(self.name, "connected" if self.connected else "disconnected", self.edid)


def get_displays():
    output = check_output(['xrandr', '--verbose'])

    current = None
    current_edid = None
    in_edid = False
    displays = {}
    for line in output.splitlines():
        m = re.match(b"(\S+) (connected|disconnected).*", line)
        if m:
            current = m.group(1)
            d = Display(current)
            d.connected = m.group(2) == b'connected'
            displays[current] = d
            continue

        if in_edid:
            m = re.match(b"\s+([0-9a-f]+)", line)
            if m:
                current_edid += m.group(1)
            else:
                displays[current].edid = current_edid
                in_edid = False
                current_edid = None

        if b"EDID:" in line:
            in_edid = True
            current_edid = b""

    return displays


def is_office(displays):
    try:
        #office_monitor = b'00ffffffffffff0010ac2ba05357473320130104a534207822b325ac5130b426105054a54b008180a940714f01010101010101010101283c80a070b023403020360007402100001a000000ff004732383348393834334757530a000000fc0044454c4c20323430385746500a000000fd00384c1e5311010a202020202020007c'
        office_monitor = b'00ffffffffffff0010ac92a04c57433034170104b53c22783a1df5ae4f35b3250d5054a54b008100b300d100714fa9408180d1c00101565e00a0a0a029503020350055502100001a000000ff00433646304b33434e3043574c0a000000fc0044454c4c205532373133480a20000000fd0031561d711e000a202020202020019302031df15090050403020716010611121513141f2023091f0783010000023a801871382d40582c450055502100001e011d8018711c1620582c250055502100009e011d007251d01e206e28550055502100001e8c0ad08a20e02d10103e960055502100001800000000000000000000000000000000000000000000000000009d'
        d = displays[b'DP1']
        return all((
            displays[b'DP1'].edid == office_monitor,
            displays[b'DP1'].connected,
        ))
    except KeyError:
        return False


def do_office(displays):
    # Put DP1 to the right of eDP1, disconnect everything else
    print("setting up displays for office")
    cmd = ['xrandr']
    for d in displays.values():
        if d.connected:
            if d.name == b'eDP1':
                cmd.extend(['--output', d.name, '--auto'])
            elif d.name == b'DP1':
                cmd.extend(['--output', d.name, '--auto', '--left-of', 'eDP1'])
            else:
                cmd.extend(['--output', d.name, '--off'])

    check_call(['xrandr', '--output', 'eDP1', '--scale', '1x1'])
    check_call(cmd)
    check_call(['i3-msg', 'workspace 2'])
    check_call(['i3-msg', 'move workspace to output DP1'])
    check_call(['i3-msg', 'workspace 1'])
    check_call(['i3-msg', 'move workspace to output DP1'])


def is_home(displays):
    try:
        home_dprt = b'00ffffffffffff0010ac17f04c4539340d160104b53420783a1ec5ae4f34b1260e5054a54b008180a940d100714f0101010101010101283c80a070b023403020360006442100001a000000ff00433539324d3233523439454c0a000000fc0044454c4c2055323431300a2020000000fd00384c1e5111000a20202020202001e302031df15090050403020716011f121314201511062309070783010000023a801871382d40582c450006442100001e011d8018711c1620582c250006442100009e011d007251d01e206e28550006442100001e8c0ad08a20e02d10103e9600064421000018000000000000000000000000000000000000000000000000000021'
        home_hdmi = b'00ffffffffffff0010ac16f04c4539340d16010380342078ea1ec5ae4f34b1260e5054a54b008180a940d100714f0101010101010101283c80a070b023403020360006442100001a000000ff00433539324d3233523439454c0a000000fc0044454c4c2055323431300a2020000000fd00384c1e5111000a202020202020016a020329f15090050403020716011f121314201511062309070767030c001000382d83010000e3050301023a801871382d40582c450006442100001e011d8018711c1620582c250006442100009e011d007251d01e206e28550006442100001e8c0ad08a20e02d10103e960006442100001800000000000000000000000000003ea'
        if b'DP1' in displays and displays[b'DP1'].connected:
            return displays[b'DP1'].edid == home_dprt
        elif b'HDMI-1' in displays and displays[b'HDMI-1'].connected:
            print('HERE!')
            return displays[b'HDMI-1'].edid == home_hdmi
        return False
    except KeyError:
        return False


def do_home(displays):
    # Put DP1 to the left of eDP1, disconnect everything else
    print("setting up displays for home")
    cmd = ['xrandr']
    for d in displays.values():
        if d.connected:
            if d.name == b'eDP1':
                cmd.extend(['--output', d.name, '--auto'])
            elif d.name == b'DP1':
                cmd.extend(['--output', d.name, '--auto', '--left-of', 'eDP1'])
            else:
                cmd.extend(['--output', d.name, '--off'])

    check_call(['xrandr', '--output', 'eDP1', '--scale', '1x1'])
    check_call(cmd)
    check_call(['xrandr', '--output', 'eDP1', '--scale', '0.7x0.7'])
    check_call(['i3-msg', 'workspace 2'])
    check_call(['i3-msg', 'move workspace to output DP1'])
    check_call(['i3-msg', 'workspace 1'])
    check_call(['i3-msg', 'move workspace to output DP1'])


def is_standalone(displays):
    connected = [d for d in displays.values() if d.connected]
    # Ignore VGA-0
    connected = [d for d in connected if d.name != b'VGA-0']
    return all((
        len(connected) == 1,
        connected[0].name == b'eDP1',
    ))


def do_standalone(displays):
    print("setting up displays for standalone")
    # Turn off all connected outputs except for eDP1
    cmd = ['xrandr']
    for d in displays.values():
        if d.connected:
            if d.name == b'eDP1':
                cmd.extend(['--output', d.name, '--auto'])
            else:
                cmd.extend(['--output', d.name, '--off'])
        else:
            cmd.extend(['--output', d.name, '--off'])

    check_call(cmd)
    check_call(['xrandr', '--output', 'eDP1', '--scale', '0.8x0.8'])


def main():
    displays = get_displays()
    if is_office(displays):
        do_office(displays)
    elif is_standalone(displays):
        do_standalone(displays)
    elif is_home(displays):
        do_home(displays)
    else:
        print("couldn't figure out what to do")
        print(displays)
    check_call(['xmodmap', '/home/catlee/.xmodmap'])
    check_call(['wallpaper.sh'])

if __name__ == '__main__':
    main()
