" Plugin management {{{
call plug#begin()

for plugin in glob('~/.vim/plugins/*.vim', 0, 1)
    execute "source " . plugin
endfor

" Plug 'vim-ruby/vim-ruby'
call plug#end()
doautocmd User PlugLoaded
" }}}

" {{{ nvim settings
if has("nvim")
    source ~/.config/nvim/nvim.vim
end
" }}}

" Standard settings {{{
" set nocompatible
" filetype plugin indent on
" syntax enable

" set hidden

" " Tabs are evil
" set et
" set smarttab
" set sts=4
" set sw=4

" set hlsearch
" set incsearch

" set number
" set relativenumber

" set smartcase
" set ignorecase
" set scrolloff=4
" set encoding=utf-8
" set complete+=i
" set showtabline=2
" set noshowmode

" " Use black background
" highlight Normal ctermbg=0

" " show tabs and trailing space
" set list
" set listchars=tab:>-,trail:.
" }}}


" Keybindings {{{
" Editing/sourcing vimrc
noremap <leader>S :source ~/.vimrc<cr>
noremap <leader>E :new ~/.vimrc<cr>

" Allow gf to open non-existent files
map gf :edit <cfile><cr>

" Don't highlight
nnoremap <C-h> :nohlsearch<cr>

" Map jk to escape
inoremap jk <Esc>

" Map H/L to move to the beginning/end of a line
" nnoremap H ^
" nnoremap L g_

" Use TAB/Shift-TAB to move between tabs
" nnoremap <TAB> :tabnext<CR>
" nnoremap <S-TAB> :tabprevious<CR>

" Better tabbing in visual mode
vnoremap < <gv
vnoremap > >gv

" Better search navigation
nnoremap n nzzzv
nnoremap N Nzzzv
" Better join
nnoremap J mzJ`z

" Yank to end of line
nnoremap Y y$

" Undo break points
" inoremap , ,<c-g>u
" inoremap . .<c-g>u
" inoremap ! !<c-g>u
" inoremap <space> <space><c-g>u

" Move through error list
" nnoremap <c-n> :cnext<cr>
" nnoremap <c-p> :cprev<cr>

" Use K to show documentation in preview window.
" nnoremap <silent> K :call <SID>show_documentation()<CR>


" }}}

" Filetype settings {{{
augroup filetype_yaml
    autocmd!
    "autocmd FileType yaml setlocal ts=3 sts=3 sw=3 expandtab
    autocmd FileType yaml setl indentkeys-=<:>
augroup END
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
augroup filetype_js
    autocmd!
    autocmd FileType javascript set ts=2
    autocmd FileType javascript set sw=2
augroup END
augroup filetype_py
    autocmd!
    autocmd FileType python let b:ale_linters = ['flake8']
augroup END
" }}}


" Set completeopt to have a better completion experience
" set completeopt=menuone,noinsert,noselect

" Avoid showing message extra message when using completion
" set shortmess+=c

" Advent of code helpers
augroup adventofcode
    autocmd!
    autocmd BufNewFile day*.rb SnipMateLoadScope ruby-aoc
augroup END

" Clipboard integration in spin
if $SPIN == 1
    let g:clipboard = {
        \ 'name': 'pbcopy',
        \ 'copy': {'+': 'pbcopy', '*': 'pbcopy'},
        \ 'paste': {'+': 'pbpaste', '*': 'pbpaste'},
        \ 'cache_enabled': 1 }
end
