" Plugin management {{{
call plug#begin()

Plug 'itchyny/lightline.vim'
Plug 'lifepillar/vim-solarized8'
Plug 'RRethy/nvim-base16'
Plug 'machakann/vim-highlightedyank'
Plug 'mbbill/undotree'
Plug 'michaeljsmith/vim-indent-object'
Plug 'ntpeters/vim-better-whitespace'
Plug 'peterrincker/vim-argumentative'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'sunaku/tmux-navigate'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'sgeb/vim-diff-fold'
Plug 'vim-ruby/vim-ruby'
Plug 'preservim/nerdtree'
Plug 'chaoren/vim-wordmotion'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'sheerun/vim-polyglot'
Plug 'vim-test/vim-test'

if has('nvim-0.5')
    Plug 'ggandor/lightspeed.nvim'
    Plug 'nvim-lua/completion-nvim'
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
else
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'junegunn/fzf.vim'
end

if has('nvim-0.6')
    Plug 'neovim/nvim-lspconfig'
    Plug 'nvim-treesitter/nvim-treesitter'
    Plug 'nvim-treesitter/nvim-treesitter-refactor'
    Plug 'nvim-treesitter/nvim-treesitter-textobjects'
    Plug 'RRethy/nvim-treesitter-textsubjects'
end

call plug#end()
" }}}

" Plugin settings {{{
let g:ruby_indent_assignment_style = 'variable'
let g:wordmotion_prefix = ','
let g:solarized_extra_hi_groups = 1

" }}}

" Standard settings {{{
set nocompatible
filetype plugin indent on
syntax enable

set hidden

" Tabs are evil
set et
set smarttab
set sts=4
set sw=4

set hlsearch
set incsearch

set number
set relativenumber

set smartcase
set ignorecase
set scrolloff=4
set encoding=utf-8
set complete+=i
set showtabline=2
set noshowmode

set background=dark
colorscheme solarized8_low
" Use black background
highlight Normal ctermbg=0

" show tabs and trailing space
set list
set listchars=tab:>-,trail:.
" }}}

" {{{ nvim settings
if has("nvim")
    source ~/.config/nvim/nvim.vim
end
" }}}

" Keybindings {{{
" Editing/sourcing vimrc
noremap <leader>S :source ~/.vimrc<cr>
noremap <leader>e :new ~/.vimrc<cr>

" Allow gf to open non-existent files
map gf :edit <cfile><cr>

" Don't highlight
nnoremap <C-h> :nohlsearch<cr>

" Map jk to escape
inoremap jk <Esc>

" Map H/L to move to the beginning/end of a line
nnoremap H ^
nnoremap L g_

" Map Ctrl-F to convert to f-string
inoremap <C-f> <Esc>ma?['"]<CR>:nohlsearch<CR>if<Esc>`ala

" Use TAB/Shift-TAB to move between tabs
nnoremap <TAB> :tabnext<CR>
nnoremap <S-TAB> :tabprevious<CR>

" Better tabbing in visual mode
vnoremap < <gv
vnoremap > >gv

" Commenting
nnoremap <leader>/ :Commentary<CR>
vnoremap <leader>/ :Commentary<CR>

" Better search navigation
nnoremap n nzzzv
nnoremap N Nzzzv
" Better join
nnoremap J mzJ`z

" Yank to end of line
nnoremap Y y$

" Undo break points
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap <space> <space><c-g>u

" Move through error list
nnoremap <c-n> :cnext<cr>
nnoremap <c-p> :cprev<cr>

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

" path text objects
" -----------------
" i/ a/
function! VisualPath()
    " find the end of the current path segment
    call search('[^/: "=]\+', 'ceW')
    silent! normal! v
    " find the beginning of the current path segment
    call search('[^/: "=]\+', 'bW')
endfunction
xnoremap i/ :<C-u>silent! call VisualPath()<CR>
onoremap i/ :<C-u>silent! normal vi/<CR>
xnoremap a/ :<C-u>silent! call VisualPath()<CR>
onoremap a/ :<C-u>silent! normal va/<CR>

" Open NerdTree at the current file
nnoremap <expr> <leader>n g:NERDTree.IsOpen() ? ':NERDTreeClose<CR>' : @% == '' ? ':NERDTree<CR>' : ':NERDTreeFind<CR>'

" }}}

" Filetype settings {{{
augroup filetype_yaml
    autocmd!
    "autocmd FileType yaml setlocal ts=3 sts=3 sw=3 expandtab
    autocmd FileType yaml setl indentkeys-=<:>
augroup END
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
augroup filetype_js
    autocmd!
    autocmd FileType javascript set ts=2
    autocmd FileType javascript set sw=2
augroup END
augroup filetype_py
    autocmd!
    autocmd FileType python let b:ale_linters = ['flake8']
augroup END
" }}}

" Set completeopt to have a better completion experience
set completeopt=menuone,noinsert,noselect

" Avoid showing message extra message when using completion
set shortmess+=c

let g:completion_matching_strategy_list = ['exact', 'substring', 'fuzzy', 'all']

" Advent of code helpers
function! s:InitializeRubyAoc()
    call append("0", "hhellow rold")
endfunction
augroup adventofcode
    autocmd!
    autocmd BufNewFile day*.rb SnipMateLoadScope ruby-aoc
augroup END
let g:snipMate = { 'snippet_version' : 1 }
